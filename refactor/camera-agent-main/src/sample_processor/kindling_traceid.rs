// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kindling_traceid.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct TraceIds {
    // message fields
    pub queryTime: i64,
    pub traceIds: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceIds {
    fn default() -> &'a TraceIds {
        <TraceIds as ::protobuf::Message>::default_instance()
    }
}

impl TraceIds {
    pub fn new() -> TraceIds {
        ::std::default::Default::default()
    }

    // int64 queryTime = 1;


    pub fn get_queryTime(&self) -> i64 {
        self.queryTime
    }
    pub fn clear_queryTime(&mut self) {
        self.queryTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_queryTime(&mut self, v: i64) {
        self.queryTime = v;
    }

    // repeated string traceIds = 2;


    pub fn get_traceIds(&self) -> &[::std::string::String] {
        &self.traceIds
    }
    pub fn clear_traceIds(&mut self) {
        self.traceIds.clear();
    }

    // Param is passed by value, moved
    pub fn set_traceIds(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.traceIds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_traceIds(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.traceIds
    }

    // Take field
    pub fn take_traceIds(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.traceIds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TraceIds {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.queryTime = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.traceIds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.queryTime != 0 {
            my_size += ::protobuf::rt::value_size(1, self.queryTime, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.traceIds {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.queryTime != 0 {
            os.write_int64(1, self.queryTime)?;
        }
        for v in &self.traceIds {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceIds {
        TraceIds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "queryTime",
                |m: &TraceIds| { &m.queryTime },
                |m: &mut TraceIds| { &mut m.queryTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "traceIds",
                |m: &TraceIds| { &m.traceIds },
                |m: &mut TraceIds| { &mut m.traceIds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TraceIds>(
                "TraceIds",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TraceIds {
        static instance: ::protobuf::rt::LazyV2<TraceIds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TraceIds::new)
    }
}

impl ::protobuf::Clear for TraceIds {
    fn clear(&mut self) {
        self.queryTime = 0;
        self.traceIds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraceIds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceIds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16kindling_traceid.proto\x12\x08kindling\"D\n\x08TraceIds\x12\x1c\n\
    \tqueryTime\x18\x01\x20\x01(\x03R\tqueryTime\x12\x1a\n\x08traceIds\x18\
    \x02\x20\x03(\tR\x08traceIds2J\n\x0eTraceIdService\x128\n\x0cSendTraceId\
    s\x12\x12.kindling.TraceIds\x1a\x12.kindling.TraceIds\"\0B\tZ\x07.;model\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
